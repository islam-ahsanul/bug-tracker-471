// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum Role {
  CONSUMER
  ADMIN
  MANAGER
  DEVELOPER
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?     @unique
  hashedPassword   String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  roles            Role        @default(CONSUMER)

  // Relations
  assignedTasks    Task[]      @relation("AssignedTasks")      // List for Developers
  postedIssues     Issue[]     @relation("PostedIssues")       // List for Consumers
  managedProjects  Project[]   @relation("AssignedProjects")   // List for Managers
  
  developerProjects DeveloperProject[]   // Many-to-many relationship using the relation table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Project {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  manager       User?       @relation("AssignedProjects", fields: [managerId], references: [id])  // Manager relation
  managerId     String?     @db.ObjectId
  issues        Issue[]     // One-to-many relation to Issues
  
  developerProjects DeveloperProject[]  // Many-to-many relationship using the relation table
}

model DeveloperProject {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String    @db.ObjectId
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, projectId])  // Ensure a developer can only be assigned once to a project
}

model Issue {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        IssueStatus @default(PENDING)
  projectId     String      @db.ObjectId
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  postedBy      User        @relation("PostedIssues", fields: [postedById], references: [id])
  postedById    String      @db.ObjectId
  tasks         Task[]      // List of tasks under this issue
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum IssueStatus {
  PENDING
  IN_PROGRESS   // Added an additional status in case needed
  SOLVED
}

model Task {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  issueId       String      @db.ObjectId
  issue         Issue       @relation(fields: [issueId], references: [id], onDelete: Cascade)
  assignedTo    User?       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId  String?     @db.ObjectId
  status        TaskStatus  @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SOLVED
}

// Authentication Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}
